<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0061)http://coursera.cs.princeton.edu/algs4/checklists/queues.html -->
<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
 <TITLE>Programming Assignment 2 Checklist: Randomized Queues and Dequeues 
</TITLE> 
<META http-equiv="Content-Type" content="text/html; charset=utf-8">
<META name="GENERATOR" content="MSHTML 11.00.10586.71"></HEAD> 
<BODY>
<P><BR>
<H2>Programming Assignment 2 Checklist: Randomized Queues and Dequeues </H2>
<P><BR>
<TABLE width="100%" border="0" cellspacing="0" cellpadding="2">
  <TBODY>
  <TR align="left">
    <TD bgcolor="#000000"><FONT color="#ffffff" face="helvetica" size="+0">
      <CENTER><B>Frequently Asked Questions</B></CENTER></FONT></TR></TBODY></TABLE>
<P><B>Should I use arrays or linked lists in my implementations?</B> In general 
we don't tell you <EM>how</EM> to implement your data structures—you can use 
arrays, linked lists, or maybe even invent your own new structure provide you 
abide by the specified time and space requirements. So, before you begin to 
write the code, make sure that your data structure  will achieve the required 
resource bounds. 
<P><B>How serious are you about not calling any external library function other 
than those in <TT>stdlib.jar</TT>?</B> You will receive a substantial deduction.
 The goal of this assignment is to implement data types from first principles, 
using resizing arrays and linked lists—feel free to use <A href="http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html">java.util.LinkedList</A>
 and <A 
href="http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html">java.util.ArrayList</A>
 on future programming assignments. We also require you to use <TT>StdIn</TT> 
(instead of  <A href="http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html">java.util.Scanner</A>)
 because we will intercept the calls to <TT>StdIn</TT> in our testing. 
<P><B>Can I add extra public methods to the <TT>Deque</TT> or 
<TT>RandomizedQueue</TT> APIs? Can I use different names for the methods?</B>
 No, you must implement the API exactly as specified. The only exception is the 
<TT>main()</TT> method, which you should use for unit testing. <!--
<p><b>If a client creates two randomized queue iterators, should 
they return the items in the same order?</b>
No, each should return them in random order, independent
of the other.
--> 
<P><B>What is meant by uniformly at random?</B> If there are <EM>N</EM> items in 
the randomized queue, then you should choose each one with probability 
1/<EM>N</EM>, up to the randomness of <TT>StdRandom.uniform()</TT>, independent 
of past decisions. You can generate a pseudo-random integer between 0 and 
<EM>N</EM>-1 using <TT>StdRandom.uniform(N)</TT> from  <A href="http://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdRandom.html"><TT>StdRandom</TT></A>. 
<P><B>Given an array, how can I rearrange the entries in random order?</B> Use 
<TT>StdRandom.shuffle()</TT>—it implements the Knuth shuffle discussed in 
lecture and runs in linear time. Note that depending on your implementation, you 
may not need to call this method. 
<P><B>What should my deque (or randomized queue) iterator do if the deque (or 
randomized queue) is structurally modified at any time after the iterator is 
created (but before it is done iterating)?</B> You don't need to worry about 
this in your solution. An industrial-strength solution (used in the Java 
libraries) is to make the iterator <EM>fail-fast</EM>: throw a 
<TT>java.lang.ConcurrentModificationException</TT> as soon as this is detected. 
<P><B>Why does the following code lead to a  <TT>generic array creation</TT> 
compile-time error when <TT>Item</TT> is a generic type parameter?</B> 
<BLOCKQUOTE>
<PRE>Item[] a = new Item[1];
</PRE></BLOCKQUOTE>Java prohibits the creation of 
arrays of generic types. See the <A href="http://algs4.cs.princeton.edu/13stacks/index.php#Q+A">Q+A 
in Section 1.3</A> for a brief discussion. Instead, use a cast. 
<BLOCKQUOTE>
<PRE>Item[] a = (Item[]) new Object[1];
</PRE></BLOCKQUOTE>Unfortunately, this 
leads to an unavoidable compiler warning. <!---
<p><b>I'm using a linked list and don't like dealing with these special cases when the list is empty or almost 
empty. Is there some way to simplify them?</b> Yes. One common method is to include sentinel nodes. A sentinel node 
is just a special node created by the constructor which is never removed, and which contains dummy data which is 
never used. The trick is that your head (and tail, if applicable) pointers always point at these special sentinel 
nodes, even if the list is empty. In other words, the head (and tail) pointers are never null, thus avoiding the 
need to check to see if the head (or tail) is null.
--> 
<P><B>The compiler says that my program uses unchecked or unsafe operations and 
to recompile with -Xlint:unchecked for details.</B> Usually this means you did a 
potentially unsafe cast.  When implementing a generic stack with an array, this 
is unavoidable since Java does not allow generic array creation. For example, 
the compiler outputs the following warning with <A href="http://algs4.cs.princeton.edu/13stacks/ResizingArrayStack.java.html">ResizingArrayStack.java</A>: 
<BLOCKQUOTE>
<PRE>% javac ResizingArrayStack.java
Note: ResizingArrayStack.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

% javac -Xlint:unchecked ResizingArrayStack.java
ResizingArrayStack.java:25: warning: [unchecked] unchecked cast
found   : java.lang.Object[]
required: Item[]
        a = (Item[]) new Object[2];
                     ^
ResizingArrayStack.java:36: warning: [unchecked] unchecked cast
found   : java.lang.Object[]
required: Item[]
        Item[] temp = (Item[]) new Object[capacity];
                               ^
2 warnings
</PRE></BLOCKQUOTE>
<P>You should not make any other casts. 
<P><B>Checkstyle complains that my nested class' instance variables must be
 private and have accessor methods that are not private. Do I need to make them 
private? </B> No, but there's no harm in doing so. The access modifier of a 
nested class' instance variable is irrelevant—regardless of its access 
modifiers, it can be accessed  anywhere in the file. (Of course, the enclosing 
class' instance variables should be private.) 
<P><B>Can a nested class have a constructor?</B> Yes. 
<P><B>What assumptions can I make about the input to <TT>Subset</TT>?</B>
 Standard input can contain any sequence of strings. You may assume that there 
is one integer command-line argument <EM>k</EM> and it is between 0 and the 
number of strings on standard input. <!--
<p><b>What assumptions can I make about the input to <tt>Palindrome</tt>?</b>
It can be any sequence of characters. 
Of course, if the input contains any character other than an <tt>'A'</tt>,
<tt>'C'</tt>, <tt>'T'</tt>, or <tt>'G'</tt> (including any lowercase character or whitespace character),
it cannot be a Watson-Crick complemented palindrome.

<p><b>I'm using Windows and my program doesn't work when I type
<tt>echo | java Palindrome</tt>. What could be wrong?</b>
On Windows, the <tt>echo</tt> command without an argument outputs <tt>"ECHO is on"</tt>,
so this becomes the input to your program; instead you can use <tt>echo. | java Palindrome</tt>.
We will test on a machine where <tt>echo | java Palindrome</tt> passes the empty string
to your program.
--> 
<P><B>Will I lose points for loitering?</B> Yes. <!-- See p. 137 of the textbook for a discussion of loitering. -->
 Loitering is maintaining a useless reference to an object that could otherwise 
be garbage collected. 
<P>
<TABLE width="100%" border="0" cellspacing="0" cellpadding="2">
  <TBODY>
  <TR align="left">
    <TD bgcolor="#000000"><FONT color="#ffffff" face="helvetica" size="+0">
      <CENTER><B>Possible Progress Steps</B></CENTER></FONT></TR></TBODY></TABLE>
<P>These are purely suggestions for how you might make progress.  You do not 
have to follow these steps. These same steps apply to each of the two data types 
that you will be implementing. 
<OL>
  <P>
  <LI><B>Make sure you understand the performance requirements for both 
  <TT>Deque</TT> and <TT>RandomizedQueue</TT>.</B> <!--
Your Deque should use space proportional to the number of items <i>currently</i> in the deque, and each 
operation must complete in <i>constant worst-case time</i>. Your Deque iterator must support each iteration 
operation (including construction) in <i>constant worst-case time</i>, and use a <i>constant</i> amount of 
extra space per iterator. Your RandomizeQueue should use space proportional to the number of items 
<i>currently</i> in the queue, and each operation should complete in <i>constant <b>amortized</b> time</i>. 
Your RandomizedQueue iterator implementation must support each iteration operation (<b>excluding</b> 
construction) in <i>constant worst-case time</i>, and use a <i>linear</i> amount of extra space per iterator.-->
   They are summarized in the table below. <EM>Every detail in these performance 
  requirements is important. Do not proceed until you understand them.</EM> 
  <CENTER>
  <P>
  <TABLE border="1" cellspacing="0" cellpadding="4">
    <TBODY><!-- Results table headers -->     
    <TR>
      <TH></TH>
      <TH>Deque</TH>
      <TH>Randomized Queue</TH></TR>
    <TR>
      <TD><B>Non-iterator operations</B></TD>
      <TD>Constant worst-case time</TD>
      <TD>Constant amortized time</TD></TR>
    <TR>
      <TD><B>Iterator constructor</B></TD>
      <TD>Constant worst-case time</TD>
      <TD>linear in current # of items</TD></TR>
    <TR>
      <TD><B>Other iterator operations</B></TD>
      <TD>Constant worst-case time</TD>
      <TD>Constant worst-case time</TD></TR>
    <TR>
      <TD><B>Non-iterator memory use</B></TD>
      <TD>Linear in current # of items</TD>
      <TD>Linear in current # of items</TD></TR>
    <TR>
      <TD><B>Memory per iterator</B></TD>
      <TD>Constant</TD>
      <TD>Linear in current # of items</TD></TR></TBODY></TABLE></P></CENTER>
  <P></P>
  <LI><B>Decide whether you want to use an array, linked list, or your own 
  class.</B> This choice should be made based on the performance requirements 
  discussed above. You may make different choices for  <TT>Deque</TT> and 
  <TT>RandomizedQueue</TT>. You might start by considering why a resizing array 
  does not support  <I>constant worst-case</I> time operations in a stack. 
  <P></P>
  <LI><B>Use our example programs as a guide when implementing your methods.</B>
   There are many new ideas in this programming assignment, including resizing 
  arrays, linked lists, iterators, the  <I>foreach</I> keyword, and generics. If 
  you are not familiar with these topics, our example code should make things 
   much easier. <A href="http://algs4.cs.princeton.edu/13stacks/ResizingArrayStack.java.html">ResizingArrayStack.java</A>
   uses a resizing array; <A href="http://algs4.cs.princeton.edu/13stacks/LinkedStack.java.html">LinkedStack.java</A> 
  uses a singly-linked list. Both examples use iterators, foreach, and generics. <!-- <a href="http://algs4.cs.princeton.edu/13stacks/DoublyLinkedList.java.html">DoublyLinkedList</a> provides an example of 
a linked list where each node has two links, which is useful for being able to go backwards in a linked list.
--> 
  <P></P>
  <LI><B>We strongly recommend that you develop <A href="http://en.wikipedia.org/wiki/Unit_testing">unit 
  tests</A> for your code as soon as you've written enough methods to allow for 
  testing.</B> As an example for <TT>Deque</TT>, you  know that if you call 
  <TT>addFirst()</TT> with the numbers 1 through N in ascending order, then call 
   <TT>removeLast()</TT> N times, you should see the numbers 1 through N in 
  ascending order. As soon as you have  those two methods written, you can write 
  a unit test for these methods. Arguably even better are randomized  unit tests 
  (which we employ heavily in our correctness testing). We recommend that you 
  create a client class  with a name like <TT>TestDeque</TT>, where each unit 
  test is a method in this class. Don't forget to test  your iterator. </LI></OL>
<TABLE width="100%" border="0" cellspacing="0" cellpadding="2">
  <TBODY>
  <TR align="left">
    <TD bgcolor="#000000"><FONT color="#ffffff" face="helvetica" size="+0">
      <CENTER><B>Programming Tricks and Common 
  Pitfalls</B></CENTER></FONT></TR></TBODY></TABLE>
<P>
<OL>
  <P>
  <LI><B>It is very important that you carefully plan your implementation before 
  you begin.</B> In particular, for each data structure that you're implementing 
  (<TT>RandomizedQueue</TT> and  <TT>Deque</TT>), you must decide whether to use 
  a linked list, an array, or something else. If you make the wrong choice, you 
  will not achieve the performance requirements and you will have to abandon 
  your code and start over. 
  <P></P>
  <LI><B>Make sure that your memory use is linear in the current number of 
  items, as opposed to the  greatest number of items that has ever been in the 
  data structure since its instantiation.</B> If you're using a resizing array, 
  you must resize the array when it becomes sufficiently empty.  You must also 
  take care to avoid loitering anytime you remove an item. 
  <P></P>
  <LI><B>Make sure to test what happens when your data structures are 
  emptied.</B> One very common  bug is for something to go wrong when your data 
  structure goes from non-empty to empty and  then back to non-empty. Make sure 
  to include this in your tests. 
  <P></P>
  <LI><B>Make sure to test that multiple iterators can be used 
  simultaneously.</B> You can test this with a nested <I>foreach</I> loop. The 
  iterators should operate independently of one another. 
  <P></P>
  <LI><B>Don't rely on our automated tests for debugging.</B> You don't have 
  access to the source code of our testing suite, so the <EM>Assessment 
  Details</EM> may be hard to utilize for debugging. As suggested above, write 
  your own unit tests; it's good practice. 
  <P></P>
  <LI><B>If you use a linked list, consider using a sentinel node (or 
  nodes).</B> Sentinel  nodes can simplify your code and prevent bugs. However, 
  they are not  required (and we have not provided examples that use sentinel 
  nodes). </LI></OL><!--
<p><b>When I am asked to give an answer using tilde notation or order-of-growth notation,
should I include  the leading coefficient and the lower order terms?</b>
By definition, tilde notation includes the leading coefficient but discards the lower order terms;
order of growth notation discards both the leading coefficient and the lower order terms.
See pp. 178-179 of the textbook.
--> <!--
<p><br>

<TABLE BORDER = 0 CELLPADDING = 2 CELLSPACING = 0 WIDTH = 100%>
<tr align = left>
<td bgcolor = "000000">
<font size = +0 face = "helvetica" color = "ffffff">
<center><b>Testing and Submitting</b></center>
</table>


<!--
<p><li><b>Getting started.</b>
Review the code from the textbook for generic stacks and queues
with iterators.
You can download the code from
the 
<a href = "http://algs4.cs.princeton.edu/code">booksite</a>.
If you adapt our code, you should include a citation to the original source
from either the textbook or the booksite.
--> 
</BODY></HTML>
